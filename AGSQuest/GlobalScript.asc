// main global script file

// called when the game starts, before the first room is loaded
function game_start()
{
  // move various GUIs to the center of the screen, even if invisible
  gQuit.Centre();
  gOptions.Centre();
  gCredits.Centre();
  
  game.dialog_options_highlight_color = 54575; //set color of highlighted dialog options
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
  //ONE-CLICK INTERFACE
  if(player.Room > 2){ // if player is beyond the main menu room
    if(player.ActiveInventory == null){ // and player is not using inventory
      //Sets the mouse mode depending on what kind of element the mouse is over.
      if(GetLocationType(mouse.x, mouse.y)== eLocationNothing){  // checks what is under the mouse cursor
        Mouse.Mode = eModeWalkto;  // sets the desired mode
      }
      if(GetLocationType(mouse.x, mouse.y)== eLocationHotspot){
        Mouse.Mode = eModeLookat;
      }
      if(GetLocationType(mouse.x, mouse.y)== eLocationCharacter){
        Mouse.Mode = eModeTalkto;
      }
      if(GetLocationType(mouse.x, mouse.y)== eLocationObject){
        Mouse.Mode = eModeInteract;
      }
      if(GUI.GetAtScreenXY(mouse.x, mouse.y) == gInGameMenu){ 
        Mouse.Mode = eModeInteract;
      }
      else if(GUI.GetAtScreenXY(mouse.x,  mouse.y) != null && GUI.GetAtScreenXY(mouse.x, mouse.y) != gDescriptions){
        Mouse.Mode = eModePointer;
      }
    }
  }
  if(player.ActiveInventory != null){ // If player is using inventory
    if(Game.DoOnceOnly("First inventory use")){ // Display a message the first time player ever uses inventory
      Display("You've activated an inventory item! Click to use the inventory item on things. To put the item away, click on the item's icon or on the blue mage character.");
    }
    //Otherwise, use inventory mode normally.
  }
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
  //Nothing here was needed in this game
}

// called when a key is pressed
function on_key_press(eKeyCode keycode, int mod)
{
  if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyQ && (mod & eKeyModCtrl))
  {
    // Ctrl-Q will call the quit-game dialogue
    gQuit.Visible = true;
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    RestartGame();
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the default save game folder set by the user's OS.
    SaveScreenShot("screenshot.pcx");
  }
  if(keycode == eKeySpace && Game.InSkippableCutscene == false){
    // Pressing spacebar skips ahead until character reaches destination, unless current movement is set to blocking.
    SkipUntilCharacterStops(0);
    }
  else if (mod & eKeyModCtrl)
  {
    ////// Debugging features
    if (keycode == eKeyS)
    {
      // Ctrl-S will give the player all defined inventory items
      Debug(0, 0);
    }
    else if (keycode == eKeyV)
    {
      // Ctrl-V will show game engine version and build date
      Debug(1, 0);
    }
    else if (keycode == eKeyA)
    {
      // Ctrl-A will show walkable areas of the current room
      Debug(2, 3);
    }
    else if (keycode == eKeyX)
    {
      // Ctrl-X will let the player teleport to any room
      Debug(3, 0);
    }
    else if (keycode == eKeyW)
    {
      // Ctrl-W will place the player character on a walkable area
      player.PlaceOnWalkableArea();
    }
  }
}

// Called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  if (IsGamePaused())
  {
    // game is paused, so do nothing (i.e. don't process mouse clicks)
  }
  else if (button == eMouseLeft) //Left mouse button is pressed
  {
    // If in-game menu is open, but a click happens outside it and no inventory is being used, then close the in-game menu
    if(GUI.GetAtScreenXY(mouse.x, mouse.y) != gInGameMenu && gInGameMenu.Visible == true && player.ActiveInventory == null){
      gInGameMenu.Visible = false;
      btnOpenMenu.Text = "O";
    }
    // left-click, so try using the current mouse cursor mode at this position
    Room.ProcessClick(mouse.x, mouse.y, mouse.Mode);
  }
  else if (button == eMouseRight)
  {
  }
}

function on_event (EventType event, int data){ //Used for various game events like adding or losing inventory, saving and restoring, entering and leaving rooms
  if (event == eEventGUIMouseDown){ // if a mouse button is pressed over a GUI
    if(GUIControl.GetAtScreenXY(mouse.x, mouse.y) == InventoryWindow1){ //put away inventory item if it is used on the inventory window
      if (player.ActiveInventory != null){
        if(InventoryItem.GetAtScreenXY(mouse.x, mouse.y) != player.ActiveInventory){
          player.ActiveInventory = null;
        }
      }
    }
  }
  if (event == eEventLeaveRoom){
    player.ActiveInventory = null; // don't keep using inventory item if the player changes rooms
  }
}

function unhandled_event(int what,  int data){ // if interaction has no script elsewhere
  if (what == 5 && data == 3){ //if using inventory item on an inventory item
    player.ActiveInventory = null; //put away inventory
  }
  if (what == 1 && data == 3){ //if using an inventory item on a hotspot
    player.Say("That doesn't seem to be useful.");
  }
}

function dialog_request(int param) {
}

// click on main menu "play" button
function btnPlay_OnClick(GUIControl *control, MouseButton button)
{
  gTitleMenu.Visible = false;
  player.ChangeRoom(3, 389, 150, eDirectionDown); // places character in new room at specific coordinates
}

//click on in-game menu opener
function btnOpenMenu_OnClick(GUIControl *control, MouseButton button)
{
  //show menu if hidden, hide if shown
  if(gInGameMenu.Visible == false){
    gInGameMenu.Visible = true;
    btnOpenMenu.Text = "X";
    return; // exit the current function to prevent second half of function from undoing first half
  }
  else{
    gInGameMenu.Visible = false;
    btnOpenMenu.Text = "O";
  }
}

//if player clicks on Red Mage character
function cRedMage_AnyClick()
{
  if(Mouse.Mode == eModeTalkto){
    player.FaceCharacter(cRedMage, eBlock); //face player character toward Red Mage character
    if(Game.DoOnceOnly("Congrats message")){ // runs the following block of code only the first time the Red Mage is clicked
      cRedMage.Say("Congratulations! You found the key and opened the door, and hopefully interacted with your environment a little along the way.");
      cRedMage.Say("This shows you some of what AGS can do. I'm able to explain the basics of how it works.");
      cRedMage.Say("If you're ready to exit the demo, on the balcony is a gem as your reward. Once you collect it, you can walk out of the forest to complete the demo.");
      cRedMage.Say("If you'd like to learn more about how AGS works, feel free to talk to me again.");
      return;
    }
    else{
      dRedMage.Start(); // starts dialogue dRedMage
    }
  }
  // if using an inventory item on the Red Mage character
  if(Mouse.Mode == eModeUseinv){
    if(player.ActiveInventory == iBlueCup){
      cRedMage.Say("What a stunning blue cup. It's no wonder AGS still has a blue cup in its logo.");
      return;
    }
    cRedMage.Say("Thank you, but please keep it.");
  }
}

//if player clicks on blue mage character
function cBlueMage_AnyClick()
{
  if(Mouse.Mode == eModeTalkto){
    player.Say("I talk to myself enough as it is.");
  }
  if(Mouse.Mode == eModeUseinv){
    player.ActiveInventory = null;
  }
}

// clicks on Quit button from main menu
function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  gQuit.Visible = true;
  Mouse.SetBounds(gQuit.X, gQuit.Y, gQuit.X+gQuit.Width, gQuit.Y+gQuit.Height); // lock mouse movment onto GUI area
}
function btnQuitNo_OnClick(GUIControl *control, MouseButton button)
{
  gQuit.Visible = false;
  Mouse.SetBounds(0, 0, 0, 0); // release mouse bounds
}

function btnQuitYes_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

// click on volume slider
function Slider1_OnChange(GUIControl *control)
{
  System.Volume = Slider1.Value; // Make slider control game volume
}

//click on "?" button from in-game menu
function Button4_OnClick(GUIControl *control, MouseButton button)
{
  gOptions.Visible = true;
  Mouse.SetBounds(gOptions.X, gOptions.Y, gOptions.X+gOptions.Width, gOptions.Y+gOptions.Height); // lock mouse movment onto GUI area
}

// close options GUI
function Button5_OnClick(GUIControl *control, MouseButton button)
{
  gOptions.Visible = false;
  Mouse.SetBounds(0, 0, 0, 0); // release mouse bounds
}

//click on "Exit" button from in-game menu
function Button3_OnClick(GUIControl *control, MouseButton button)
{
  gQuit.Visible = true;
  Mouse.SetBounds(gQuit.X, gQuit.Y, gQuit.X+gQuit.Width, gQuit.Y+gQuit.Height); // lock mouse movment onto GUI area
}

//click on save button
function Button1_OnClick(GUIControl *control, MouseButton button)
{
  Display("Game saved.");
  SaveGameSlot(1, "SaveGame1"); // saves game to slot 1
}

//click on load button
function Button2_OnClick(GUIControl *control, MouseButton button)
{
  if(Game.GetSaveSlotDescription(1) != null){ // if save game slot 1 is not empty
    Display("Save game restored.");
    RestoreGameSlot(1);
  }
  else{ // if save slot 1 is empty
    Display("No saved game to load.");
  }
}

//click on "about" button
function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  gTitleMenu.Visible = false;
  gCredits.Visible = true;
}

//close "about" GUI
function ButtonCloseCredits_OnClick(GUIControl *control, MouseButton button)
{
  gCredits.Visible = false;
  if(player.Room == 2){
    gTitleMenu.Visible = true;
  }
  if(player.Room == 3){
    FadeOut(2);
    RestartGame();
  }
}
