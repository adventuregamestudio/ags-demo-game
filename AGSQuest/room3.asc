// room script file
bool IsDoorLocked = true;  // define variable for door state

function room_Load() // called before the room fades in
{
  gDescriptions.Visible = true; // hover text GUI at bottom of screen
  oGem.Scaling = 25; //Adjust size of gem object
  
  if(player.x == 90 && player.y == 130){ // if player is entering from balcony
    oDoor2.Graphic = 10; // make sure balcony door is open
  }
}

function room_FirstLoad() // called only once, after the first time the room fades in
{
  StartCutscene(eSkipAnyKey); //start cutscene, allowing keyboard to skip
  cBlueMage.Walk(360, 176, eBlock, eWalkableAreas);
  cBlueMage.Say("That looks like the Red Mage's treehouse.");
  cBlueMage.Say("He said he'd leave a key outside for me somewhere.");
  cBlueMage.Say("I guess I'd better look for it.");
  EndCutscene(); // skipping cutscene will skip to here
  Display("Click on different parts of the room to walk, examine, and interact with your environemnt.");
  gGameMenuOpener.Visible = true; 
  // In-Game menu opener GUI. The properties of this GUI have it set to appear in the bottom right corner of the screen.
}

function room_AfterFadeIn() //called immediately after the room fades in
{
  Mouse.Mode = eModeWalkto;
}


function room_RepExec() // Lines here get run every game loop, unless the game is in a blocking state
{
  //No repetitive actions were needed in this room.
}

function hBench_AnyClick() // called when player clicks on bench (this function is created by hBench hotspot properties in room editor)
{
  if(player.y < 270){ // if player is far away from the hotspot
    player.Say("I need to get closer.");
  }
  else{ // if player is closer
    player.Walk(88, 286, eBlock, eWalkableAreas);
    player.FaceDirection(eDirectionLeft);
    if(player.ActiveInventory != null){ //if player uses inventory on hotspot
      unhandled_event(1, 3); // call unhandled event function from global script
      return;
    }
    if(player.HasInventory(iKey)){  // called if player already has key
      player.Say("There's nothing under it now.");
    }
    else{ // called if player doesn't have key yet
      player.Say("A stone garden bench.");
      player.Say("It looks like there's something under it.");
      player.Say("Aha! This is the key the Red Mage left for me.");
      gInGameMenu.Visible = true;         // Show the inventory GUI so that
      WaitMouseKey(GetGameSpeed());       // the player sees the item when it
      player.AddInventory(iKey);          // becomes added. Add inventory item. Play powerup sound.
      aPowerup_by_maodin204.Play();       // Then hide the GUI afterward.
      WaitMouseKey(GetGameSpeed());       // 
      gInGameMenu.Visible = false;        //
      player.Say("Now I should be able to get into the treehouse.");
    }
  }
}

//Next few functions are called when player clicks on the different hotspots in the room.
//Created from each hotspot's properties pane.
function hPond_AnyClick()
{
  if(player.ActiveInventory == iBlueCup){
    player.Say("I probably shouldn't drink that.");
    return;
  }
  else if(player.ActiveInventory != null && player.ActiveInventory != iBlueCup){ //if player uses inventory on hotspot
    unhandled_event(1, 3); // call unhandled event function from global script
    return;
  }
  player.Say("A pretty garden pond.");
  player.Say("I don't thonk the Red Mage would make me dig through water for the key, though.");
}

function hFlowers_AnyClick()
{
  if(player.ActiveInventory != null){
    player.Say("I shouldn't disturb the flowers.");
  }
  else{
    player.Say("Flowers that bloom only at night.");
    player.Say("They make the grounds feel magical without needing magic.");
  }
}

function hForest_AnyClick()
{
  if(player.y > 135){ //if player is not on balcony
    if(player.ActiveInventory != null){ //if player uses inventory on hotspot
      unhandled_event(1, 3); // call unhandled event function from global script
      return;
    }
    if(player.HasInventory(iGem)){  // called only if the player has the gem inventory item
      player.Say("I suppose my tasks in this forest are done.");
      player.Walk(416, 144, eBlock, eWalkableAreas);
      gCredits.Visible = true; // open credits GUI
      Mouse.SetBounds(gCredits.X, gCredits.Y, gCredits.X+gCredits.Width, gCredits.Y+gCredits.Height); // lock cursor over GUI
    }
    else{ // called if player does not have gem
      player.Say("The path leads back where I cam from.");
      player.Say("I'm not ready to leave yet.");
    }
  }
  else{ // if player is on balcony
    player.Say("I need to get down to the ground if I want to leave.");
  }
}

function hBalcony_AnyClick()
{
  if(player.ActiveInventory != null){ //if player uses inventory on hotspot
    unhandled_event(1, 3); // call unhandled event function from global script
    return;
  }
  if(player.y > 135){ // if player is at ground level
    player.Say("I expect that balcony has a lovely view.");
    player.Say("I can't get there from here.");
  }
  else{ // if player is at balcony level
    player.Say("It is indeed a lovely view from up here.");
  }
}

function hShrine_AnyClick()
{
  if(player.x < 250 || player.y < 260){ // if player is far away from the hotspot
    player.Say("I need to get closer.");
  }
  else{ // called every time the player clicks while close enough
    player.Walk(565, 260, eBlock, eWalkableAreas); 
    player.FaceDirection(eDirectionUp);
    if(player.ActiveInventory != null){ //if player uses inventory on hotspot
      unhandled_event(1, 3); // call unhandled event function from global script
      return;
    }
    // called only the first time the player clicks while close enough
    if(Game.DoOnceOnly("First shrine click")){ 
      player.Say("It's a shrine to the mystical source of the magic we mages use.");
      player.Say("We respect our magic and don't use it lightly.");
      player.Say("This is a place to honor that.");
      WaitMouseKey(GetGameSpeed());
      player.FaceDirection(eDirectionDown);
    }
    
    //back to every time the player clicks while close enough
    player.Say("The shrine adds a meditative ambiance to the garden.");
    player.Say("There doesn't appear to be a key here.");
  }
}

function hToadstools_AnyClick()
{
  if(player.y < 260){ // if player is far away
    player.Say("I need to get closer.");
  }
  if(player.ActiveInventory != null){ //if player uses inventory on hotspot
    unhandled_event(1, 3); // call unhandled event function from global script
    return;
  }
  else{ // if player is closer
    player.Walk(100, 340, eBlock, eWalkableAreas);
    player.Say("Very large toadstools. Probably poisonous.");
    player.Say("A great place to hide a key, but there isn't one under any of them.");
  }
}

function hWindow_AnyClick()
{
  if(player.y < 276){ // if player is far away
    player.Say("I need to get closer.");
  }
  else{ // if player is closer
    if(player.ActiveInventory != null){ //if player uses inventory on hotspot
      player.Say("Throwing things through windows is not behavior becoming of a mage.");
      return;
    }
    player.Walk(112, 280, eBlock, eWalkableAreas);
    player.FaceDirection(eDirectionUp);
    player.Say("The window is a little high up.");
    player.Say("And anyway, it would be rude to spy.");
    player.Say("After all, the Red Mage said he'd leave a key for me.");
  }
}

function hTreehouse_AnyClick()
{
  player.Say("It's a majestic home. I look forward to experiencing the inside.");
}

//click on frog object
function oFrog_AnyClick()
{
  if(player.y < 260 || player.x > 250){
    player.Say("I need to get closer.");
  }
  else{
    if(player.ActiveInventory != null){
      player.Say("I don't think the frog is interested in this."); 
      return;
    }
    else{
      aFrog_by_egomassive.Play(); // play frog sound effect
      oFrog.SetView(2); // allows frog object to access the desired animation
      oFrog.Animate(0, 5, eOnce, eBlock); // animate frog
    }
  }
}

//click on front door object
function oDoor1_AnyClick()
{
  if(player.y < 135){ // if player is on balcony
    player.Say("I can't reach it.");
  }
  else{ //if player is on ground
    player.Walk(190, 254, eBlock, eWalkableAreas);
    if(oDoor1.Graphic == 8){ // if door is already opened
      if(player.ActiveInventory != null){ //and player is using inventoty
        player.Say("The door is already open. I don't need to use anything on it.");
      }
      else{ // if not using inventoy
        aDoor_Close_by_kyles.Play(); // play door close sound
        oDoor1.Graphic = 7; // change door sprite to closed door
        return;
      }
    }
    if(oDoor1.Graphic == 7){ //if door closed
      if(IsDoorLocked == true){ // if door closed and locked
        if(player.ActiveInventory != null && player.ActiveInventory != iKey){ //if using non-key item
          aDoor_Close_by_kyles.Play(); //play rattling sound
          player.Say("This isn't unlocking the door.");
          return;
        }
        if(player.ActiveInventory == iKey){ // if using key
          aUnlock_by_kyles.Play(); // play unlock sound
          player.Say("The key works!");
          aDoorOpen_by_splicesound.Play(); // play door open sound
          oDoor1.Graphic = 8; // change door sprite to open door
          
          IsDoorLocked = false; //set state which affects future interactions
        }
        else{ // if door closed and locked, player is not using key
          aDoor_Close_by_kyles.Play(); //play rattling sound
          player.Say("It's locked.");
        }
      }
      else{ // if door closed but unlocked
        if(player.ActiveInventory != null){ //if using inventory
          player.Say("The door is already unlocked.");
        }
        else{ //if not using inventory
          aDoorOpen_by_splicesound.Play(); // play door opening sound
          oDoor1.Graphic = 8; // change sprite to open door
        }
      }
    }
  }
}

//click on gem object
function oGem_AnyClick()
{
  if(player.y > 135){ // if player is at ground level
    player.Say("It's a gem of some kind. I can't quite see it.");
  }
  else{ // if player is on balcony
    if(player.ActiveInventory != null){ //if player uses inventory on hotspot
      unhandled_event(1, 3);
      return;
    }
    player.Say("Here's the gem the Red Mage mentioned.");
    gInGameMenu.Visible = true;         // Show the inventory GUI so that
    WaitMouseKey(GetGameSpeed());       // the player sees the item when it
    player.AddInventory(iGem);          // becomes added. Add inventory item. Play powerup sound. 
    aPowerup_by_maodin204.Play();       // Then hide the GUI afterward.
    WaitMouseKey(GetGameSpeed());       // 
    gInGameMenu.Visible = false;        //
    player.Say("This means I've completed the required tasks of the demo game.");
    player.Say("So whenever I want to, I can leave by following the path out of the forest.");
    oGem.Visible = false; //hide gem object
    Display("To exit the demo, follow the path out of the forest, or click the EXIT button in the menu.");
    Display("To explore how the game was made, talk to the Red Mage or use the AGS editor to explore the various elements of the game.");
  }
    
}

//click on entrance hitspot revealed by door object changing to open sprite
function hEntrance_AnyClick()
{
  if(player.y > 140){ //if player is on ground floor
    player.Walk(180, 254, eBlock, eWalkableAreas); // walk to door using walkable areas
    player.Walk(160, 254, eBlock, eAnywhere); // walk through doorway (off walkable area)
    player.ChangeRoom(4, 438, 342, eDirectionLeft); // change room to specific coordinates
  }
  else{ // if player is on balcony
    player.Say("I can't get there from here.");
  }
}

//click on balcony door
function oDoor2_AnyClick()
{
  if(player.y < 135){ // if player is on balcony
    if(player.ActiveInventory == null){
      if(oDoor2.Graphic == 9){
        aDoorOpen_by_splicesound.Play();
        oDoor2.Graphic = 10;
        return;
      }
      else{
        aDoor_Close_by_kyles.Play();
        oDoor2.Graphic = 9;
      }
    }
    else{
      player.Say("The door isn't locked.");
    }
  }
  else{ //if player is at ground level
    player.Say("I can't get there from here.");
  }
}

//click on doorway hotspot revealed by door object changing to open sprite
function hBackDoorway_AnyClick()
{
  if(player.y < 135){ //if player is on balcony
    player.Walk(93, 128, eBlock, eAnywhere);
    player.Transparency = 100; // player character disappears into doorway
    Wait(1); //make sure disappearance happens before room fade-out
    player.ChangeRoom(4, 200, 146, eDirectionRight); // go into the interior room at specific coordinates
  }
  else{ // if player is at ground level
    player.Say("I can't get there from here.");
  }
}
